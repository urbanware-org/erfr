
USAGE (erfr-executor.py)

    Contents:

        1.  Definition
        2.  General stuff
          2.1  How to run Python scripts
          2.2  Overview of all command-line arguments
        3.  Purpose of the Erfr Executor
        4.  Encrypt and decrypt data using a parameter file
          4.1  Export encryption related information
          4.2  Encrypt the file
          4.3  Decrypt the file again

    1. Definition

        The Erfr Executor script processes parameter files generated by the
        main Erfr script containing encryption related information.

    2. General stuff

        2.1 How to run Python scripts

            All usage examples below show how to execute the Python scripts on
            the shell of a Unix-like system. If you do not know, how to run
            those scripts on your operating system, you may have a look at
            this page:

                http://www.urbanware.org/howto_python.html

        2.2 Overview of all command-line arguments

            Usually, each script requires command-line arguments to operate.
            So, to get an overview of all arguments available, simply run the
            script with the "--help" argument. For example:

                $ ./erfr-executor.py --help

    3. Purpose of the Erfr Executor

        Since Erfr version 4.3.0, it is possible to export all the encryption
        parameters (encryption related information you give by command-line
        arguments) into a file.

        This file can later be processed by the Erfr Executor component. This
        saves the labour of typing the same command multiple times with all
        the information required.

    4. Encrypt and decrypt data using a parameter file

        4.1 Export encryption related information

            First of all, a parameter file must be created. This must be done
            using the main Erfr component.

            See section 9 of the documentation of the main Erfr script how to
            do this.

            In this example, the parameter file contains the following
            information:

                [Erfr]
                version = 4.3.0

                [Task]
                task_id = 1

                [Files]
                input_file = /tmp/foobar.txt
                key_file = /tmp/foobar.key
                output_file = /tmp/foobar.enc

                [Options]
                buffer_size = 4096
                use_existing_key = 0
                overwrite = 0

                [Obfuscation]
                obfuscate_enc = 0
                obfuscate_key = 0

                [PRNG]
                fortuna = 0
                dev_random = 0

                [Rotation]
                rotate_min = 2
                rotate_max = 8
                rotate_step = 3
                rotate_mod = 1

                [Reversion]
                reverse_bytes = 0

                [S-box]
                sbox = 0

        4.2 Encrypt the file

            Now, to encrypt the input file in the parameter file, with
            all the given parameters, simply type:

                $ ./erfr-executor.py -a encrypt -f foobar.par

        4.3 Decrypt the file again

            Now, to decrypt the encrypted file again, type:

                $ ./erfr-executor.py -a decrypt -f foobar.par

            If the "--overwrite" command-line argument was given when creating
            the parameter file, the original input file will be overwritten.
            To avoid this, you can use the "-s" command-line argument to add
            an additional suffix for the decrypted file, e. g. "dec":

                $ ./erfr-executor.py -a decrypt -f foobar.par -s "dec"

            So, in this case, the decrypted file name will be "foobar.txt.dec"
            instead of just "foobar.txt". Due to this, the original file will
            not be overwritten and remains untouched.

